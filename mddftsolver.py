
from snowwhite import *
import numpy as np
import ctypes
import sys


class MddftProblem(SWProblem):
    """Define Multi-dimention DFT problem."""

    def __init__(self, ns, k=SW_FORWARD):
        """Setup problem specifics for MDDFT solver.
        
        Arguments:
        n      -- dimensions of MDDFT
        """
        super(MddftProblem, self).__init__()
        self._ns = ns
        self._k = k
        
    def dimensions(self):
        return self._ns
        
    def direction(self):
        return self._k
        

class MddftSolver(SWSolver):
    def __init__(self, problem: MddftProblem, opts = {}):
        if not isinstance(problem, MddftProblem):
            raise TypeError("problem must be an MddftProblem")
        
        ns = 'x'.join([str(n) for n in problem.dimensions()])
        c = '_'
        namebase = ''
        if problem.direction() == SW_FORWARD:
            namebase = 'mddft_fwd' + c + ns
        else:
            namebase = 'mddft_inv' + c + ns
            
        super(MddftSolver, self).__init__(problem, namebase, opts)

    def runDef(self, src):
        """Solve using internal Python definition."""

        if self._problem.direction() == SW_FORWARD:
            FFT = np.fft.fftn ( src )
        else:
            FFT = np.fft.ifftn ( src ) 

        return FFT
        
    def _trace(self):
        pass

    def _func(self, dest, source):
        """Call the SPIRAL generated main function -- {_namebase}."""
        funcname = self._namebase
        gf = getattr(self._SharedLibAccess, funcname)

        return gf( dest.ctypes.data_as(ctypes.c_void_p),
                   source.ctypes.data_as(ctypes.c_void_p) )

    def solve(self, src):
        """Call SPIRAL-generated function."""

        nt = tuple(self._problem.dimensions())
        dst = np.zeros(nt, complex)
        self._func(dst, src)
        if self._problem.direction() == SW_INVERSE:
            dst = dst / np.size(dst)
        return dst

    def _writeScript(self, script_file):
        filename = self._namebase
        nameroot = self._namebase
        dims = str(self._problem.dimensions())
        filetype = '.c'
        if self._genCuda:
            nameroot = nameroot + '_cu'
            filetype = '.cu'
        
        print("Load(fftx);", file = script_file)
        print("ImportAll(fftx);", file = script_file) 
        if self._genCuda:
            print("conf := LocalConfig.fftx.confGPU();", file = script_file) 
        else:
            print("conf := LocalConfig.fftx.defaultConf();", file = script_file) 
        print("t := let(ns := " + dims + ",", file = script_file) 
        print('    name := "' + nameroot + '",', file = script_file)
        # -1 is inverse for Numpy and forward (1) for Spiral
        print("    TFCall(TRC(MDDFT(ns, " + str(self._problem.direction() * -1) + ")), rec(fname := name, params := []))", file = script_file)
        print(");", file = script_file)        

        print("opts := conf.getOpts(t);", file = script_file)
        print("tt := opts.tagIt(t);", file = script_file)
        print("", file = script_file)
        print("c := opts.fftxGen(tt);", file = script_file)
        print('PrintTo("' + filename + filetype + '", opts.prettyPrint(c));', file = script_file)
        print("", file = script_file)
        
    def _writeCudaHost(self):
        """ Write CUDA host code """
        
        # Python interface to C libraries does not handle mangled names from CUDA/C++ compiler
        
        dims = tuple(self._problem.dimensions())

        
        inSzStr  = str(2 * np.prod(dims))
        outSzStr = str(2 * np.prod(dims))
        
        cu_hostFileName = self._namebase + '_host.cu'
        cu_hostFile = open(cu_hostFileName, 'w')
        
        genby = 'Host-to-Device C/CUDA Wrapper generated by ' + self.__class__.__name__
        print('/*', file=cu_hostFile)
        print(' * ' + genby, file=cu_hostFile)
        print(' */', file=cu_hostFile)
        print('', file=cu_hostFile)
        
        print('#include <helper_cuda.h> \n', file=cu_hostFile)
        
        print('extern void init_' + self._namebase + '_cu();', file=cu_hostFile)
        
        print('extern void ' + self._namebase + '_cu' + '(double  *Y, double  *X);', file=cu_hostFile)
        print('extern void destroy_' + self._namebase + '_cu();\n', file=cu_hostFile)
        print('double  *dev_in, *dev_out; \n', file=cu_hostFile)
        print('extern "C" { \n', file=cu_hostFile)
        print('void init_' + self._namebase + '()' + '{', file=cu_hostFile)
        
        print('    cudaMalloc( &dev_in,  sizeof(double) * ' + inSzStr + ');', file=cu_hostFile)
        print('    cudaMalloc( &dev_out, sizeof(double) * ' + outSzStr +'); \n', file=cu_hostFile)
        print('    init_' + self._namebase + '_cu();', file=cu_hostFile)
        print('} \n', file=cu_hostFile)
        
        print('void ' + self._namebase + '(double  *Y, double  *X) {', file=cu_hostFile)
        print('    cudaMemcpy ( dev_in, X, sizeof(double) * ' + inSzStr + ', cudaMemcpyHostToDevice);', file=cu_hostFile)
        print('    ' + self._namebase + '_cu(dev_out, dev_in);', file=cu_hostFile)
        print('    checkCudaErrors(cudaGetLastError());', file=cu_hostFile)
        print('    cudaMemcpy ( Y, dev_out, sizeof(double) * ' + outSzStr + ', cudaMemcpyDeviceToHost);', file=cu_hostFile)
        print('} \n', file=cu_hostFile)
        
        print('void destroy_' + self._namebase + '() {', file=cu_hostFile)
        print('    cudaFree(dev_out);', file=cu_hostFile)
        print('    cudaFree(dev_in); \n', file=cu_hostFile)
        print('    destroy_' + self._namebase + '_cu();', file=cu_hostFile)
        print('} \n', file=cu_hostFile)
        print('}', file=cu_hostFile)
        
        cu_hostFile.close()







